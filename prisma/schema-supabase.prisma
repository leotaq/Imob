// Schema Prisma para Supabase (PostgreSQL)
// Este arquivo é otimizado para uso com Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário (integrado com Supabase Auth)
model Usuario {
  id        String   @id @default(cuid())
  email     String   @unique
  nome      String
  telefone  String?
  avatar    String?
  tipo      TipoUsuario @default(CLIENTE)
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  solicitacoes Solicitacao[]
  imoveis      Imovel[]
  avaliacoes   Avaliacao[]
  
  @@map("usuarios")
}

// Modelo de imóvel
model Imovel {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String?
  tipo        TipoImovel
  status      StatusImovel @default(DISPONIVEL)
  preco       Decimal  @db.Decimal(12, 2)
  area        Float?
  quartos     Int?
  banheiros   Int?
  vagas       Int?
  endereco    String
  cidade      String
  estado      String
  cep         String?
  latitude    Float?
  longitude   Float?
  fotos       Json?    // Array de URLs das fotos
  caracteristicas Json? // Características específicas
  proprietarioId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  proprietario Usuario @relation(fields: [proprietarioId], references: [id], onDelete: Cascade)
  solicitacoes Solicitacao[]
  avaliacoes   Avaliacao[]
  
  @@map("imoveis")
}

// Modelo de solicitação
model Solicitacao {
  id        String   @id @default(cuid())
  tipo      TipoSolicitacao
  status    StatusSolicitacao @default(PENDENTE)
  mensagem  String?
  prioridade PrioridadeSolicitacao @default(MEDIA)
  dataAgendamento DateTime?
  observacoes String?
  anexos    Json?    // Array de URLs dos anexos
  clienteId String
  imovelId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  cliente   Usuario @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  imovel    Imovel? @relation(fields: [imovelId], references: [id], onDelete: SetNull)
  
  @@map("solicitacoes")
}

// Modelo de avaliação
model Avaliacao {
  id        String   @id @default(cuid())
  nota      Int      @db.SmallInt // 1-5
  comentario String?
  clienteId String
  imovelId  String
  createdAt DateTime @default(now())
  
  // Relacionamentos
  cliente   Usuario @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  imovel    Imovel  @relation(fields: [imovelId], references: [id], onDelete: Cascade)
  
  @@unique([clienteId, imovelId])
  @@map("avaliacoes")
}

// Modelo de configuração do sistema
model Configuracao {
  id        String   @id @default(cuid())
  chave     String   @unique
  valor     String
  descricao String?
  tipo      TipoConfiguracao @default(TEXTO)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("configuracoes")
}

// Modelo de log de atividades
model LogAtividade {
  id        String   @id @default(cuid())
  acao      String
  entidade  String
  entidadeId String?
  usuarioId String?
  detalhes  Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@map("logs_atividade")
}

// Enums
enum TipoUsuario {
  ADMIN
  CORRETOR
  CLIENTE
  PROPRIETARIO
}

enum TipoImovel {
  CASA
  APARTAMENTO
  TERRENO
  COMERCIAL
  RURAL
  OUTROS
}

enum StatusImovel {
  DISPONIVEL
  RESERVADO
  VENDIDO
  ALUGADO
  INATIVO
}

enum TipoSolicitacao {
  VISITA
  INFORMACAO
  PROPOSTA
  CONTRATO
  MANUTENCAO
  OUTROS
}

enum StatusSolicitacao {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
  REJEITADA
}

enum PrioridadeSolicitacao {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum TipoConfiguracao {
  TEXTO
  NUMERO
  BOOLEAN
  JSON
  URL
  EMAIL
}

// Índices para performance
// @@index([email]) - já é unique
// @@index([tipo, status]) - para filtros de imóveis
// @@index([status, createdAt]) - para solicitações
// @@index([clienteId, createdAt]) - para histórico do cliente