#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Assistente de Migra√ß√£o de Hospedagem');
console.log('=====================================\n');

// Verificar se o projeto est√° pronto para migra√ß√£o
function checkProjectReadiness() {
  console.log('üìã Verificando prontid√£o do projeto...');
  
  const checks = [
    { file: 'backend/package.json', desc: 'Backend package.json' },
    { file: 'backend/index.js', desc: 'Arquivo principal do backend' },
    { file: '.env.production', desc: 'Vari√°veis de produ√ß√£o' },
    { file: 'package.json', desc: 'Package.json raiz' }
  ];
  
  let allGood = true;
  
  checks.forEach(check => {
    if (fs.existsSync(check.file)) {
      console.log(`‚úÖ ${check.desc}`);
    } else {
      console.log(`‚ùå ${check.desc} - FALTANDO`);
      allGood = false;
    }
  });
  
  return allGood;
}

// Verificar vari√°veis de ambiente
function checkEnvironmentVariables() {
  console.log('\nüîß Verificando vari√°veis de ambiente...');
  
  const requiredVars = [
    'DATABASE_URL',
    'JWT_SECRET',
    'CORS_ORIGIN',
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY',
    'NODE_ENV'
  ];
  
  let envContent = '';
  if (fs.existsSync('.env.production')) {
    envContent = fs.readFileSync('.env.production', 'utf8');
  }
  
  requiredVars.forEach(varName => {
    if (envContent.includes(varName)) {
      console.log(`‚úÖ ${varName}`);
    } else {
      console.log(`‚ö†Ô∏è  ${varName} - N√£o encontrada em .env.production`);
    }
  });
}

// Mostrar op√ß√µes de hospedagem
function showHostingOptions() {
  console.log('\nüåê Op√ß√µes de Hospedagem Recomendadas:');
  console.log('=====================================');
  
  console.log('\n1. üöÇ RAILWAY (RECOMENDADO)');
  console.log('   ‚úÖ F√°cil configura√ß√£o');
  console.log('   ‚úÖ Suporte nativo a Node.js');
  console.log('   ‚úÖ Plano gratuito generoso');
  console.log('   ‚úÖ Deploy autom√°tico via GitHub');
  console.log('   üìù Arquivo: railway.json (j√° criado)');
  
  console.log('\n2. üé® RENDER');
  console.log('   ‚úÖ Interface amig√°vel');
  console.log('   ‚úÖ SSL autom√°tico');
  console.log('   ‚úÖ Plano gratuito dispon√≠vel');
  console.log('   üìù Arquivo: render.yaml (j√° criado)');
  
  console.log('\n3. üî∑ DIGITALOCEAN APP PLATFORM');
  console.log('   ‚úÖ Boa performance');
  console.log('   ‚úÖ Pre√ßo competitivo');
  console.log('   ‚ö†Ô∏è  Requer configura√ß√£o manual');
  
  console.log('\n4. üü£ HEROKU');
  console.log('   ‚úÖ Muito est√°vel');
  console.log('   ‚ùå Sem plano gratuito');
  console.log('   üí∞ A partir de $7/m√™s');
}

// Instru√ß√µes espec√≠ficas para Railway
function showRailwayInstructions() {
  console.log('\nüöÇ INSTRU√á√ïES PARA RAILWAY:');
  console.log('============================');
  console.log('\n1. Acesse: https://railway.app');
  console.log('2. Fa√ßa login com GitHub');
  console.log('3. Clique em "New Project"');
  console.log('4. Selecione "Deploy from GitHub repo"');
  console.log('5. Escolha este reposit√≥rio');
  console.log('6. Railway detectar√° automaticamente o railway.json');
  console.log('\nüìã VARI√ÅVEIS DE AMBIENTE PARA CONFIGURAR:');
  
  const vars = [
    'DATABASE_URL - URL do seu banco Supabase',
    'JWT_SECRET - Chave secreta (32+ caracteres)',
    'CORS_ORIGIN - URL do seu frontend',
    'SUPABASE_URL - URL do projeto Supabase',
    'SUPABASE_ANON_KEY - Chave an√¥nima do Supabase',
    'SUPABASE_SERVICE_ROLE_KEY - Chave de servi√ßo',
    'NODE_ENV - production'
  ];
  
  vars.forEach((v, i) => {
    console.log(`   ${i + 1}. ${v}`);
  });
}

// Instru√ß√µes espec√≠ficas para Render
function showRenderInstructions() {
  console.log('\nüé® INSTRU√á√ïES PARA RENDER:');
  console.log('===========================');
  console.log('\n1. Acesse: https://render.com');
  console.log('2. Fa√ßa login com GitHub');
  console.log('3. Clique em "New +" ‚Üí "Blueprint"');
  console.log('4. Conecte seu reposit√≥rio GitHub');
  console.log('5. Render detectar√° o render.yaml automaticamente');
  console.log('6. Configure as vari√°veis de ambiente');
  console.log('7. Clique em "Apply"');
}

// Verificar se Git est√° configurado
function checkGitStatus() {
  console.log('\nüì¶ Verificando status do Git...');
  
  try {
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    if (status.trim()) {
      console.log('‚ö†Ô∏è  H√° altera√ß√µes n√£o commitadas:');
      console.log(status);
      console.log('\nüí° Recomenda√ß√£o: Fa√ßa commit antes de fazer deploy');
    } else {
      console.log('‚úÖ Reposit√≥rio limpo - pronto para deploy');
    }
    
    const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
    console.log(`üìç Branch atual: ${branch}`);
    
  } catch (error) {
    console.log('‚ùå Erro ao verificar Git:', error.message);
  }
}

// Fun√ß√£o principal
function main() {
  const isReady = checkProjectReadiness();
  
  if (!isReady) {
    console.log('\n‚ùå Projeto n√£o est√° pronto para migra√ß√£o.');
    console.log('üìù Corrija os problemas acima antes de continuar.');
    return;
  }
  
  checkEnvironmentVariables();
  checkGitStatus();
  showHostingOptions();
  
  console.log('\nüéØ RECOMENDA√á√ÉO:');
  console.log('=================');
  console.log('Para este projeto, recomendamos RAILWAY devido √†:');
  console.log('‚Ä¢ Facilidade de configura√ß√£o');
  console.log('‚Ä¢ Compatibilidade total com Node.js/Express');
  console.log('‚Ä¢ Plano gratuito suficiente');
  console.log('‚Ä¢ Deploy autom√°tico');
  
  showRailwayInstructions();
  
  console.log('\nüîó LINKS √öTEIS:');
  console.log('===============');
  console.log('‚Ä¢ Railway: https://railway.app');
  console.log('‚Ä¢ Render: https://render.com');
  console.log('‚Ä¢ Supabase: https://supabase.com');
  console.log('‚Ä¢ Documenta√ß√£o: ./GUIA_MIGRACAO_HOSPEDAGEM.md');
  
  console.log('\n‚ú® Boa sorte com a migra√ß√£o!');
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { checkProjectReadiness, checkEnvironmentVariables, showHostingOptions };